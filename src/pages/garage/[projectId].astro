---
import type { MarkdownInstance } from "astro";
import Footer from "../../layouts/Footer.astro";
import Header from "../../layouts/Header.astro";
import Layout from "../../layouts/Layout.astro";
import Three from "../../layouts/Three.astro";
import projects from "../../projects";
import {
  isProjectEntryFile,
  type ProjectEntryFrontmatter,
  type ProjectFrontmatter,
} from "../../types";
import { getPostHeadingId, getPostTitle } from "../../utils";
import ProjectPost from "../../layouts/ProjectPost.astro";

export function getStaticPaths() {
  return projects.map((project) => ({ params: { projectId: project.id } }));
}

const { projectId } = Astro.params;

const project = projects.find((project) => project.id === projectId);

// TODO: look at Astro Content Collections
const projectPath = `site/projects/${projectId}`;
const indexFilePath = `${projectPath}/index.md`;
const nonIndexFilePathRegex = new RegExp(
  `${projectPath}/(\\d|\\w|-)+\\.md`,
  "g",
);
const allPosts = await Astro.glob<ProjectFrontmatter>(
  "../../../projects/**/*.md",
);
const indexPost = allPosts.filter((post) =>
  post.file.includes(indexFilePath),
)[0];
const projectPosts: MarkdownInstance<ProjectEntryFrontmatter>[] = allPosts
  .filter((post) => !post.file.includes(indexFilePath))
  .filter((post) => !!post.file.match(nonIndexFilePathRegex))
  .filter(isProjectEntryFile);
---

<Layout title="garage | barlo">
  <div class="bg-limed-spruce text-text">
    <div class="flex min-h-screen flex-col leading-relaxed">
      <Header />
      <Three>
        <a href="/garage" class="hover:underline pb-4">‚Üê back</a>
        <h2 class="text-xl">Project: {project?.label}</h2>
        <indexPost.Content />
        {
          projectPosts.length > 0 && (
            <>
              <hr class="mt-2 mb-2" />
              <div class="grow gap-2 2xl:gap-5 flex basis-0 flex-col 2xl:flex-row-reverse pb-20 2xl:items-start">
                <div class="bg-limed-spruce-700 border p-2 2xl:w-60 sticky top-20">
                  {projectPosts.map((post) => (
                    <div>
                      <a
                        class="hover:underline"
                        href={`#${getPostHeadingId(post)}`}
                      >
                        {getPostTitle(post)}
                      </a>
                    </div>
                  ))}
                </div>
                <div class="basis-0 grow">
                  {projectPosts.map((post, i) => (
                    <>
                      {i > 0 && <hr class="mt-5 mb-4" />}
                      <ProjectPost post={post} />
                    </>
                  ))}
                </div>
              </div>
            </>
          )
        }
      </Three>
      <Footer />
    </div>
  </div>
</Layout>

<style>
  body,
  html {
    scroll-padding-top: 20%;
  }
</style>
